version: '3.8'

services:
  # PostgreSQL Database for Production
  postgres:
    image: postgres:15-alpine
    container_name: japanese-real-estate-db-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-japanese_real_estate_prod}
      POSTGRES_USER: ${DB_USER:-prod_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-prod_user} -d ${DB_NAME:-japanese_real_estate_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Cache for Production
  redis:
    image: redis:7-alpine
    container_name: japanese-real-estate-redis-prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Backend API for Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: japanese-real-estate-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-prod_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-japanese_real_estate_prod}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-japanese_real_estate_prod}
      DB_USER: ${DB_USER:-prod_user}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      PORT: 3001
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGIN: ${CORS_ORIGIN}
      GOOGLE_TRANSLATE_API_KEY: ${GOOGLE_TRANSLATE_API_KEY}
      SCRAPING_DELAY_MIN: ${SCRAPING_DELAY_MIN:-2000}
      SCRAPING_DELAY_MAX: ${SCRAPING_DELAY_MAX:-5000}
      MAX_CONCURRENT_SCRAPERS: ${MAX_CONCURRENT_SCRAPERS:-1}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      replicas: 2

  # Frontend for Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: japanese-real-estate-frontend-prod
    environment:
      REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL}
      REACT_APP_ENVIRONMENT: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx Load Balancer (optional for production)
  nginx:
    image: nginx:1.25-alpine
    container_name: japanese-real-estate-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: always
    profiles:
      - with-nginx

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  app-network:
    driver: bridge